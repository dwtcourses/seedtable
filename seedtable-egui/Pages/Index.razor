@page "/"
@inject IJSRuntime JSRuntime;
@using YamlDotNet.Serialization;

<div style="text-align: center; width: 100%; height: 100%;">
    @if (LogWindow) {
        <textarea readonly style="width: 100%; height: 80%; box-sizing: border-box">
            @foreach (var line in Log) {
                @(line + "\n")
            }
        </textarea>
        <br />
        <button disabled="@WorkInProgress" @onclick="EndLog">OK</button>
    } else {
        <label>seedフォルダ</label>
        <input @bind="SeedPath" />
        <button @onclick="OpenSeedPath">開く</button>
        <br />
        <label>設定</label>
        <input @bind="SettingPath" />
        <button @onclick="OpenSettingPath">開く</button>

        <br />
        <button @onclick="YamlToExcelClicked" style="width: 150px; height: 150px; background: #fff; border: 1px solid #999"><img src="images/yamlToExcel.png" /></button>
        <button @onclick="ExcelToYamlClicked" style="width: 150px; height: 150px; background: #fff; border: 1px solid #999"><img src="images/excelToYaml.png" /></button>
    }
</div>

@code {
    string SeedPath { get => _SeedPath; set { _SeedPath = value; SaveFormValues(); } }
    string _SeedPath;
    string SettingPath { get => _SettingPath; set { _SettingPath = value; SaveFormValues(); } }
    string _SettingPath;

    bool LogWindow = false;
    bool WorkInProgress = false;
    List<string> Log = new List<string>();

    protected override void OnInitialized() {
        RestoreFormValues();
        RestorePersonalFormValues();
    }

    void EndLog() {
        LogWindow = false;
    }

    async void OpenSeedPath() {
        var result = await JSRuntime.ShowOpenDialog(new OpenDialogOption {
            Title = "seedフォルダを開く",
            ButtonLabel = "開く",
            DefaultPath = SeedPath,
            Properties = new string[] { "openDirectory" },
        });
        if (!result.Canceled) {
            SeedPath = result.FilePaths.FirstOrDefault();
            StateHasChanged();
        }
    }

    async void OpenSettingPath() {
        var result = await JSRuntime.ShowOpenDialog(new OpenDialogOption {
            Title = "設定ファイルを開く",
            ButtonLabel = "開く",
            DefaultPath = SettingPath,
            Properties = new string[] { "openFile" },
            Filters = new FileFilter[] { new FileFilter { Name = "options.yml", Extensions = new string[] { "yml" } } },
        });
        if (!result.Canceled) {
            SettingPath = result.FilePaths.FirstOrDefault();
            StateHasChanged();
        }
    }

    async void YamlToExcelClicked() {
        var result = await JSRuntime.ShowOpenDialog(new OpenDialogOption {
            Title = "テンプレートExcelファイルを開く",
            ButtonLabel = "開く",
            DefaultPath = TemplateExcelsDirectoryPath,
            Properties = new string[] { "openFile", "multiSelections" },
            Filters = new FileFilter[] { new FileFilter { Name = "Excelファイル", Extensions = new string[] { "xlsx", "xlsm" } } },
        });
        if (!result.Canceled) {
            if (result.FilePaths.Count() > 0) TemplateExcelsDirectoryPath = Path.GetDirectoryName(result.FilePaths.First());
            YamlToExcel(result.FilePaths);
        }
    }

    async void ExcelToYamlClicked() {
        var result = await JSRuntime.ShowOpenDialog(new OpenDialogOption {
            Title = "編集したExcelファイルを開く",
            ButtonLabel = "開く",
            DefaultPath = DataExcelsDirectoryPath,
            Properties = new string[] { "openFile", "multiSelections" },
            Filters = new FileFilter[] { new FileFilter { Name = "Excelファイル", Extensions = new string[] { "xlsx", "xlsm" } } },
        });
        if (!result.Canceled) {
            if (result.FilePaths.Count() > 0) DataExcelsDirectoryPath = Path.GetDirectoryName(result.FilePaths.First());
            ExcelToYaml(result.FilePaths);
        }
    }

    async void YamlToExcel(IEnumerable<string> fileNames) {
        if (fileNames == null) return;
        var fileBaseNames = fileNames.Select(fileName => Path.GetFileName(fileName));
        var fileDirNames = fileNames.Select(fileName => Path.GetDirectoryName(fileName));
        var fileDirName = fileDirNames.First();
        if (!fileDirNames.All(_fileDirName => fileDirName == _fileDirName)) {
            await JSRuntime.ShowErrorBox("同じフォルダにあるxlsxファイルのみにして下さい", "エラー");
            return;
        }
        var setting = await LoadSetting();
        if (setting == null) return;
        var result = await JSRuntime.ShowOpenDialog(new OpenDialogOption {
            Title = "保存フォルダを開く",
            ButtonLabel = "開く",
            DefaultPath = DataExcelsDirectoryPath,
            Properties = new string[] { "openDirectory" },
        });
        if (result.Canceled) {
            return;
        } else {
            DataExcelsDirectoryPath = result.FilePaths.FirstOrDefault();
            StateHasChanged();
        }
        var options = setting.ToOptions(
            files: fileBaseNames,
            seedInput: SeedPath,
            xlsxInput: fileDirName,
            output: DataExcelsDirectoryPath
        );

        Log.Clear();
        WorkInProgress = true;
        LogWindow = true;
        StateHasChanged();

        SeedTableInterface.InformationMessageEventHandler handler = (string message) => {
            Log.Add(message);
            StateHasChanged();
        };
        SeedTableInterface.InformationMessageEvent += handler;
        try {
            SeedTableInterface.SeedToExcel(options);
        } catch (SeedTableInterface.CannotContinueException) {
            await JSRuntime.ShowErrorBox("処理が失敗しました");
        }
        SeedTableInterface.InformationMessageEvent -= handler;

        WorkInProgress = false;
        StateHasChanged();
    }

    async void ExcelToYaml(IEnumerable<string> fileNames) {
        if (fileNames == null) return;
        var setting = await LoadSetting();
        if (setting == null) return;
        var options = setting.FromOptions(
            files: fileNames,
            input: ".",
            output: SeedPath
        );

        Log.Clear();
        WorkInProgress = true;
        LogWindow = true;
        StateHasChanged();

        SeedTableInterface.InformationMessageEventHandler handler = (string message) => {
            Log.Add(message);
            StateHasChanged();
        };
        SeedTableInterface.InformationMessageEvent += handler;
        try {
            SeedTableInterface.ExcelToSeed(options);
        } catch (SeedTableInterface.CannotContinueException) {
            await JSRuntime.ShowErrorBox("処理が失敗しました");
        }
        SeedTableInterface.InformationMessageEvent -= handler;

        WorkInProgress = false;
        StateHasChanged();
    }

    private string DataExcelsDirectoryPath {
        get { return _DataExcelsDirectoryPath; }
        set {
            _DataExcelsDirectoryPath = value;
            SavePersonalFormValues();
        }
    }
    private string _DataExcelsDirectoryPath;

    private string TemplateExcelsDirectoryPath {
        get { return _TemplateExcelsDirectoryPath; }
        set {
            _TemplateExcelsDirectoryPath = value;
            SavePersonalFormValues();
        }
    }
    private string _TemplateExcelsDirectoryPath;

    async ValueTask<BasicOptions> LoadSetting(bool showAlert = true) {
        if (SettingPath == null || SettingPath.Length == 0) {
            if (showAlert) await JSRuntime.ShowErrorBox("設定ファイルを指定して下さい", "エラー");
            return null;
        }
        if (!File.Exists(SettingPath)) {
            if (showAlert) await JSRuntime.ShowErrorBox("指定された設定ファイルがありません", "エラー");
            return null;
        }
        return BasicOptions.Load(SettingPath);
    }

    private void SaveFormValues() {
        var yaml = new Serializer().Serialize(new FormValues(SeedPath, SettingPath));
        File.WriteAllText(FormValuesPath, yaml);
    }

    private void RestoreFormValues() {
        if (!File.Exists(FormValuesPath)) return;
        var yaml = File.ReadAllText(FormValuesPath);
        var formValues = new Deserializer().Deserialize<FormValues>(yaml);
        SeedPath = formValues.SeedPath;
        SettingPath = formValues.SettingPath;
    }

    private void SavePersonalFormValues() {
        var yaml = new Serializer().Serialize(new PersonalFormValues(DataExcelsDirectoryPath, TemplateExcelsDirectoryPath));
        File.WriteAllText(PersonalFormValuesPath, yaml);
    }

    private void RestorePersonalFormValues() {
        if (!File.Exists(PersonalFormValuesPath)) return;
        var yaml = File.ReadAllText(PersonalFormValuesPath);
        var personalFormValues = new Deserializer().Deserialize<PersonalFormValues>(yaml);
        DataExcelsDirectoryPath = personalFormValues.DataExcelsDirectoryPath;
        TemplateExcelsDirectoryPath = personalFormValues.TemplateExcelsDirectoryPath;
    }

    private string FormValuesPath {
        get { return Path.Combine(ApplicationRootPath, FormValuesFile); }
    }
    private const string FormValuesFile = "settings.yml";

    private string PersonalFormValuesPath {
        get { return Path.Combine(ApplicationRootPath, PersonalFormValuesFile); }
    }
    private const string PersonalFormValuesFile = "personal_settings.yml";

    private string SettingReadOnlyPath {
        get { return Path.Combine(ApplicationRootPath, SettingReadOnlyFile); }
    }
    private const string SettingReadOnlyFile = "options.readonly";

    private static HashSet<string> AllowExtensions = new HashSet<string> {".xlsx", ".xlsm"};

    private static string ApplicationRootPath = Path.GetDirectoryName(System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName);
}
